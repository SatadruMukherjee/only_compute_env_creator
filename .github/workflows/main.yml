name: "Terraform"

on: [push]


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    env:
      AWS_ACCESS_KEY_ID : ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY : ${{secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_DEFAULT_REGION : ${{secrets.AWS_DEFAULT_REGION}}
      TF_VAR_AWS_DEFAULT_REGION : ${{secrets.TF_VAR_AWS_DEFAULT_REGION}}
      TF_VAR_s3_FOLDER_KEY : ${{secrets.TF_s3_FOLDER_KEY}}
      TF_VAR_batch_compute_env_name : ${{secrets.TF_VAR_BATCH_COMPUTE_ENV_NAME}}
      TF_VAR_aws_batch_compute_env_max_vcpu : ${{secrets.TF_VAR_AWS_BATCH_COMPUTE_ENV_MAX_VCPU}}
      TF_VAR_aws_batch_compute_env_security_groups : ${{secrets.TF_VAR_AWS_BATCH_COMPUTE_ENV_SECURITY_GROUPS}}
      TF_VAR_aws_batch_compute_env_subnet_groups : ${{secrets.TF_VAR_AWS_BATCH_COMPUTE_ENV_SUBNET_GROUPS}}
      S3_BUCKET_REGION: ${{ secrets.S3_BUCKET_REGION}}
      TF_VAR_AWS_S3_BUCKET: ${{secrets.AWS_S3_BUCKET}}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
      - name: Install Terraform
        run: |
          echo $environment
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd terraform_code
          terraform init -input=false -force-copy -backend-config="bucket=$TF_VAR_AWS_S3_BUCKET" -backend-config="key=$TF_VAR_s3_FOLDER_KEY/tf-state/${GITHUB_REF_NAME}/terraform.tfstate" -backend-config="region=$S3_BUCKET_REGION"

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd terraform_code
          terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: |
          cd terraform_code
          terraform apply -auto-approve -input=false

        #Capturing the output from TF
      - name: Capturing AWS Batch ARN & Compute Env Name
        run: |
          cd terraform_code
          echo $(terraform output PET_Generic_AWS_BATCH_JOB_CLUSTER_ARN)
          echo $(terraform output PET_Generic_AWS_BATCH_JOB_CLUSTER_Name)
